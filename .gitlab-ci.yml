# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest python docker image to build and test this project.
image: $SKA_K8S_TOOLS_BUILD_DEPLOY

# cache is used to specify a list of files and directories which should be cached between jobs. You can only use paths that are within the project workspace.
# If cache is defined outside the scope of jobs, it means it is set globally and all jobs will use that definition
# cache:
#   paths:

stages:
  - lint
  - build
  - test
#  - pages
#  - publish
#  - scan



# Standardised included jobs
variables:
  GIT_SUBMODULE_STRATEGY: recursive
  MINIKUBE: "false"
  CI_POETRY_VERSION: "2.0.1"

# Include CI templates
include:

# Python
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/python-lint.gitlab-ci.yml'
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/python-build.gitlab-ci.yml'
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/python-test.gitlab-ci.yml'

# Docs
  # - project: 'ska-telescope/templates-repository'
  #   file: 'gitlab-ci/includes/docs.gitlab-ci.yml'

# Release
  # - project: 'ska-telescope/templates-repository'
  #   file: 'gitlab-ci/includes/release.gitlab-ci.yml'

# .post step finalisers eg: badges
  # - project: 'ska-telescope/templates-repository'
  #   file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'

python-lint:
  before_script:
    - poetry config virtualenvs.in-project true
    - echo "python-build Setting.. poetry config virtualenvs.create $POETRY_CONFIG_VIRTUALENVS_CREATE"
    - poetry config virtualenvs.create $POETRY_CONFIG_VIRTUALENVS_CREATE
    - |
      if [[ -n $CI_POETRY_VERSION ]] && [[ $(poetry --version) != *$CI_POETRY_VERSION* ]]; then
        echo "python-lint: Updating poetry to $CI_POETRY_VERSION";
        time pipx upgrade poetry;
      fi;

      echo "python-lint: Installing with poetry";
      time poetry install --all-extras;

cpp-build:
  stage: build
  script:
    - poetry install
    - mkdir cpp_build && cd cpp_build
    - poetry run conan install .. --output-folder=. --settings build_type=Debug --build=gtest
    - poetry run cmake .. -DCMAKE_BUILD_TYPE=Debug
    - poetry run cmake --build .
  artifacts:
    name: "$CI_COMMIT_REF_NAME-build"
    paths:
      - cpp_build/*
    expire_in: 1 d

cpp-test:
  stage: test
  script:
    - cd cpp_build && mkdir reports
    - ctest --output-on-failure --force-new-ctest-process --output-junit reports/unit-tests.xml
  artifacts:
    paths:
      - cpp_build/
    reports:
      junit: cpp_build/reports/unit-tests.xml

validate-test-results:
  stage: test
  needs: ["cpp-test", "python-test"]
  script:
    # TODO
    - cat cpp_build/reports/unit-tests.xml
    - cat build/reports/unit-tests.xml

