# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest python docker image to build and test this project.
image: $SKA_K8S_TOOLS_BUILD_DEPLOY

# cache is used to specify a list of files and directories which should be cached between jobs. You can only use paths that are within the project workspace.
# If cache is defined outside the scope of jobs, it means it is set globally and all jobs will use that definition
# cache:
#   paths:

stages:
  # - lint
  - build
  - test
#  - pages
#  - publish
#  - scan



# Standardised included jobs
variables:
  GIT_SUBMODULE_STRATEGY: recursive
  MINIKUBE: "false"
  CI_POETRY_VERSION: "2.0.1"
  USE_CONAN: "true"

# Include CI templates
include:
  # Python
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/python.gitlab-ci.yml"

  # Conan
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/conan.gitlab-ci.yml"

  # Docs pages
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/docs.gitlab-ci.yml"

  # Build and publish changelog
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/release.gitlab-ci.yml"




# python-lint:
#   before_script:
#     - poetry config virtualenvs.in-project true
#     - echo "python-build Setting.. poetry config virtualenvs.create $POETRY_CONFIG_VIRTUALENVS_CREATE"
#     - poetry config virtualenvs.create $POETRY_CONFIG_VIRTUALENVS_CREATE
#     - |
#       if [[ -n $CI_POETRY_VERSION ]] && [[ $(poetry --version) != *$CI_POETRY_VERSION* ]]; then
#         echo "python-lint: Updating poetry to $CI_POETRY_VERSION";
#         time pipx upgrade poetry;
#       fi;

#       echo "python-lint: Installing with poetry";
#       time poetry install --all-extras;

cpp-build-release:
  stage: build
  before_script:
  script:
    - make cpp-build-release USE_CONAN=$USE_CONAN
  artifacts:
    name: "$CI_COMMIT_REF_NAME-build"
    paths:
      - build/*
    expire_in: 1 d

cpp-build-debug:
  stage: build
  before_script:
  script:
    make cpp-build-debug 
  artifacts:
    name: "$CI_COMMIT_REF_NAME-build_debug"
    paths:
      - build-debug/*
    expire_in: 1 d

cpp-build-armv8:
  stage: build
  before_script:
    - apt-get update && apt-get install -y --no-install-recommends gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
  script:
    make cpp-build-armv8 
  artifacts:
    name: "$CI_COMMIT_REF_NAME-build_cross"
    paths:
      - build-cross/*
    expire_in: 1 d

cpp-test:
  stage: test
  needs: ["cpp-build-debug"]
  script:
    - make cpp-test
  artifacts:
    paths:
      - build-debug/
    reports:
      junit: build-debug/reports/unit-tests.xml

